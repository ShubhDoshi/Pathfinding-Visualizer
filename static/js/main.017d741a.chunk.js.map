{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","i","setTimeout","animateShortestPath","document","getElementById","alert","animateDijkstraFast","animateDijkstraMedium","animateDijkstraSlow","DFS","getNewGridWithNodeVisited","x","stack1","stack2","curRow","pop","curCol","temp","array","y","Math","floor","random","splice","ceil","verticalWalls","horizontalWalls","z","parent","temp1","temp2","ind1","a","b","ind2","walls","len","window","location","href","rel","src","crossorigin","class","onClick","reload","Dropdown","Toggle","variant","Menu","Item","mazeUsingKruskal","mazeGeneration","mazeUsingPrim","mazeWithVerticalWalls","randomMazeGenerator","visualizeDijkstraFast","visualizeDijkstraMedium","visualizeDijkstraSlow","changeLocation","icon","faSquareFull","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.017d741a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Node.css';\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    let extraClassName = isFinish;\r\n    if (isFinish===true){\r\n      extraClassName='node-finish';\r\n      return (\r\n        <div\r\n          id={`node-${row}-${col}`}\r\n          className={`node ${extraClassName}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}></div>\r\n      );\r\n    }\r\n    else if (isStart===true){\r\n      extraClassName='node-start';\r\n      return (\r\n        <div\r\n          id={`node-${row}-${col}`}\r\n          className={`node ${extraClassName}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}></div>\r\n      );\r\n    }\r\n    else if (isWall===true){\r\n      extraClassName='node-wall';\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}","//dijkstra algorithm\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.isWall) continue;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  //to sort the unvisited nodes by current distance\r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  //to update the distance of unvisited nodes\r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  //to get the unvisited neighbors\r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  //to get all nodes of the grid\r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  //to get the nodes in the shortest path\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\n//import {bfs} from '../algorithms/bfs';\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport { faSquareFull } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport './PathfindingVisualizer.css';\r\n\r\nlet START_NODE_ROW =12;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 12;\r\nlet FINISH_NODE_COL = 43;\r\n\r\n\r\n/*\r\nconst START_NODE_ROW = prompt(\"Please enter start-node row\", 12);\r\nconst START_NODE_COL = prompt(\"Please enter start-node column\", 14);\r\nconst FINISH_NODE_ROW = prompt(\"Please enter target-node row\", 12);\r\nconst FINISH_NODE_COL = prompt(\"Please enter target-node column\", 42);\r\n*/\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n  \r\n  \r\n  //function to give animation while implementing dijkstra with slow speed\r\n  animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length-1; i++) {\r\n      if (i === visitedNodesInOrder.length-1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 500 * i);\r\n        return;\r\n      }\r\n      else{\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 500* i);\r\n    }\r\n    }\r\n  }\r\n\r\n  //function to give animation while implementing dijkstra with medium speed\r\n  animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length-1; i++) {\r\n      if (i === visitedNodesInOrder.length-1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 75 * i);\r\n        return;\r\n      }\r\n      else{\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 75* i);\r\n    }\r\n    }\r\n  }\r\n\r\n  //function to give animation while implementing dijkstra with fast speed\r\n  animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length-1; i++) {\r\n      if (i === visitedNodesInOrder.length-1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      else{\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10* i);\r\n    }\r\n    }\r\n  }\r\n\r\n  //function to give animation to shortest path after implementing dijkstra  \r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 1; i < nodesInShortestPathOrder.length-1; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    if(nodesInShortestPathOrder.length<=1){\r\n      setTimeout(() => {\r\n      alert(\"Shortest Path Not Found!!\");\r\n      },1000);\r\n    }\r\n  }\r\n\r\n  //implement dijkstra for finding shortest path for fast speed\r\n  visualizeDijkstraFast() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  //implement dijkstra for finding shortest path for medium speed\r\n  visualizeDijkstraMedium() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  //implement dijkstra for finding shortest path for slow speed\r\n  visualizeDijkstraSlow() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n  /*\r\n  getNodesInShortestPathOrderBFS(startNode,finishNode,previous) {\r\n    //let x=0;\r\n    /*for(let row=0;row<23;row++){\r\n        for(let col=0;col<57;col++){\r\n            if(row===12 && col>12 && col!==15){\r\n                alert(previous[row][col].col);\r\n            }\r\n        }\r\n    }\r\n  alert(previous[12][27].row);\r\n  alert(previous[12][27].col);\r\n  const arr = [finishNode];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== startNode && currentNode!==null) {\r\n    const {row,col} = currentNode;\r\n    currentNode=previous[row][col];\r\n    arr.push(currentNode);\r\n  }\r\n  const nodesInShortestPathOrder=[];\r\n  for(let i=arr.length-1;i>=0;i--){\r\n      nodesInShortestPathOrder.push(arr[i]);\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n  visualizeBFS(){\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    //const visitedNodesInOrder= bfs(grid, startNode, finishNode);\r\n    const previous=bfs(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = this.getNodesInShortestPathOrderBFS(startNode,finishNode,previous);\r\n    alert(nodesInShortestPathOrder);\r\n    /*this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }*/\r\n\r\n  //generates a maze using DFS\r\n  mazeGeneration(grid){\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    this.DFS(grid,START_NODE_ROW,START_NODE_COL);\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===1){\r\n          grid[row][col].isVisited=false;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //DFS algorithm to create a random maze\r\n  DFS(grid,row,col){\r\n    let newGrid = getNewGridWithNodeVisited(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: false});\r\n    let x=1;\r\n    let stack1=[row];\r\n    let stack2=[col];\r\n    while (x>0){\r\n      let curRow=stack1.pop();\r\n      let curCol=stack2.pop();\r\n      x--;\r\n      newGrid = getNewGridWithNodeVisited(this.state.grid, row, col);\r\n      this.setState({grid: newGrid, mouseIsPressed: false});\r\n      let temp=0;\r\n    let array=[]\r\n    if (curRow>1){\r\n      if (grid[curRow-2][curCol].isVisited===false){\r\n        temp+=1;\r\n        array.push(1);\r\n      }\r\n    }\r\n    if (curCol>2){\r\n      if (grid[curRow][curCol-2].isVisited===false){\r\n        temp+=1;\r\n        array.push(2);\r\n      }\r\n    }\r\n    if (curRow<21){\r\n      if (grid[curRow+2][curCol].isVisited===false){\r\n        temp+=1;\r\n        array.push(3);\r\n      }\r\n    }\r\n    if(curCol<55){\r\n      if (grid[curRow][curCol+2].isVisited===false){\r\n        temp+=1;\r\n        array.push(4);\r\n      }\r\n    }\r\n    while (temp>0){\r\n      \r\n      let y=Math.floor(Math.random()*temp);\r\n      if (array[y]===1){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow-1, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow-2);\r\n        stack2.push(curCol);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow-2, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      else if(array[y]===2){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow, curCol-1);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow);\r\n        stack2.push(curCol-2);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow, curCol-2);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      else if(array[y]===3){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow+1, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow+2);\r\n        stack2.push(curCol);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow+2, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      else if(array[y]===4){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow, curCol+1);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow);\r\n        stack2.push(curCol+2);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow, curCol+2);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      temp--;\r\n    }\r\n    }\r\n  }\r\n\r\n  //add random vertical walls in the grid\r\n  mazeWithVerticalWalls(grid){\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if(((row===0 || col===0)||(row===22 || col===56))&&(grid[row][col].isWall===false)){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    for (let col = 2; col < 55; col+=2){\r\n      let row=1\r\n      while(row<22) {\r\n        let x=Math.ceil((22-row)*Math.random());\r\n        if (x===21){\r\n          x--;\r\n        }\r\n        while(x>0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n          row++;\r\n          x--;\r\n        }\r\n        row++;\r\n      }\r\n    }\r\n  }\r\n  \r\n  //generates a random maze using DFS algorithm and algorithm to add vertical walls\r\n  randomMazeGenerator(grid){\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    this.DFS(grid,START_NODE_ROW,START_NODE_COL);\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===1){\r\n          grid[row][col].isVisited=false;\r\n        }\r\n      }\r\n    }\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if(((row===0 || col===0)||(row===22 || col===56))&&(grid[row][col].isWall===false)){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    for (let col = 2; col < 55; col+=2){\r\n      let row=1\r\n      while(row<22) {\r\n        let x=Math.ceil((22-row)*Math.random());\r\n        if (x===21){\r\n          x--;\r\n        }\r\n        while(x>0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n          row++;\r\n          x--;\r\n        }\r\n        row++;\r\n      }\r\n    }\r\n  }\r\n\r\n  //Kruksal's algorithm to create a random maze\r\n  mazeUsingKruskal(grid){\r\n    let verticalWalls=[];\r\n    let horizontalWalls=[];\r\n    let z=0;\r\n    let y=0;\r\n    let parent=[];\r\n    for (let row = 0; row < 23; row++) {\r\n      let temp=[];\r\n      for (let col = 0; col < 57; col++) {\r\n        if((((row+col)%2===0)||(row%2===0))&&((row!==START_NODE_ROW || col!==START_NODE_COL)&&(row!==FINISH_NODE_ROW || col!==FINISH_NODE_COL))){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n        if((((row+col)%2===0)&&(row%2===0))&&(row!==0 && row!==22)){\r\n          verticalWalls.push([row,col]);\r\n          z++;\r\n        }\r\n        if(((row+col)%2===0)&&(row%2===1)){\r\n          horizontalWalls.push([row,col]);\r\n          y++;\r\n        }\r\n        temp.push([row,col]);\r\n      }\r\n      parent.push(temp);\r\n    }\r\n    let temp1=Math.floor(4*Math.random());\r\n    if(temp1===0){\r\n      parent[START_NODE_ROW-1][START_NODE_COL][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW-1][START_NODE_COL][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      grid[START_NODE_ROW-1][START_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else if(temp1===1){\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      parent[START_NODE_ROW][START_NODE_COL+1][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW][START_NODE_COL+1][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      grid[START_NODE_ROW][START_NODE_COL+1].isWall=false;\r\n      z--;\r\n    }\r\n    else if(temp1===2){\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      parent[START_NODE_ROW+1][START_NODE_COL][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW+1][START_NODE_COL][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      grid[START_NODE_ROW+1][START_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else{\r\n      parent[START_NODE_ROW][START_NODE_COL-1][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW][START_NODE_COL-1][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      grid[START_NODE_ROW][START_NODE_COL-1].isWall=false;\r\n      z--;\r\n    }\r\n    let temp2=Math.floor(4*Math.random());\r\n    if(temp2===0){\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      grid[FINISH_NODE_ROW-1][FINISH_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else if(temp2===1){\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL+1][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL+1][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      grid[FINISH_NODE_ROW][FINISH_NODE_COL+1].isWall=false;\r\n      z--;\r\n    }\r\n    else if(temp2===2){\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      grid[FINISH_NODE_ROW+1][FINISH_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else{\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL-1][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL-1][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      grid[FINISH_NODE_ROW][FINISH_NODE_COL-1].isWall=false;\r\n      z--;\r\n    }\r\n    while(y>0 && z>0){\r\n      let x=Math.floor(2*Math.random());\r\n      if(x===0){\r\n        let ind1=Math.floor(y*Math.random());\r\n        if(ind1===y){\r\n          ind1--;\r\n        }\r\n        let curRow=horizontalWalls[ind1][0];\r\n        let curCol=horizontalWalls[ind1][1];\r\n        let a=parent[curRow][curCol-1][0];\r\n        let b=parent[curRow][curCol-1][1];\r\n        if ((parent[curRow][curCol+1][0]!==a)||(parent[curRow][curCol+1][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow || col!==curCol+1)&&(parent[row][col][0]===parent[curRow][curCol+1][0] && parent[row][col][1]===parent[curRow][curCol+1][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow][curCol+1][0]=a;\r\n          parent[curRow][curCol+1][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        horizontalWalls.splice(ind1,1);\r\n        y--;\r\n      }\r\n      else{\r\n        let ind2=Math.floor(z*Math.random());\r\n        if(ind2===z){\r\n          ind2--;\r\n        }\r\n        let curRow=verticalWalls[ind2][0];\r\n        let curCol=verticalWalls[ind2][1];\r\n        let a=parent[curRow-1][curCol][0];\r\n        let b=parent[curRow-1][curCol][1];\r\n        if ((parent[curRow+1][curCol][0]!==a)||(parent[curRow+1][curCol][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow+1 || col!==curCol)&&(parent[row][col][0]===parent[curRow+1][curCol][0] && parent[row][col][1]===parent[curRow+1][curCol][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow+1][curCol][0]=a;\r\n          parent[curRow+1][curCol][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        verticalWalls.splice(ind2,1);\r\n        z--;\r\n      }\r\n    }\r\n    \r\n    while(y>0){\r\n      let ind1=Math.floor(y*Math.random());\r\n        let curRow=horizontalWalls[ind1][0];\r\n        let curCol=horizontalWalls[ind1][1];\r\n        let a=parent[curRow][curCol-1][0];\r\n        let b=parent[curRow][curCol-1][1];\r\n        if ((parent[curRow][curCol+1][0]!==a)||(parent[curRow][curCol+1][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow || col!==curCol+1)&&(parent[row][col][0]===parent[curRow][curCol+1][0] && parent[row][col][1]===parent[curRow][curCol+1][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow][curCol+1][0]=a;\r\n          parent[curRow][curCol+1][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        horizontalWalls.splice(ind1,1);\r\n        y--;\r\n    }\r\n    while(z>0){\r\n      let ind2=Math.floor(z*Math.random());\r\n        let curRow=verticalWalls[ind2][0];\r\n        let curCol=verticalWalls[ind2][1];\r\n        let a=parent[curRow-1][curCol][0];\r\n        let b=parent[curRow-1][curCol][1];\r\n        if ((parent[curRow+1][curCol][0]!==a)||(parent[curRow+1][curCol][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow+1 || col!==curCol)&&(parent[row][col][0]===parent[curRow+1][curCol][0] && parent[row][col][1]===parent[curRow+1][curCol][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow+1][curCol][0]=a;\r\n          parent[curRow+1][curCol][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        verticalWalls.splice(ind2,1);\r\n        z--;\r\n    }\r\n  }\r\n    \r\n  //Prim's algorithm to create a random maze\r\n  mazeUsingPrim(grid){\r\n    let walls=[];\r\n    let len=0;\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((((row+col)%2===0)||(row%2===0))&&(row!==FINISH_NODE_ROW-1 || col!==FINISH_NODE_COL)&&(row!==START_NODE_ROW || col!==START_NODE_COL-1)&&(row!==FINISH_NODE_ROW || col!==FINISH_NODE_COL+1)&&((row!==START_NODE_ROW || col!==START_NODE_COL)&&(row!==FINISH_NODE_ROW || col!==FINISH_NODE_COL))){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    walls.push([START_NODE_ROW-1,START_NODE_COL]);\r\n    walls.push([START_NODE_ROW+1,START_NODE_COL]);\r\n    walls.push([START_NODE_ROW,START_NODE_COL+1]);\r\n    grid[START_NODE_ROW][START_NODE_COL].isVisited=true;\r\n    grid[START_NODE_ROW][START_NODE_COL-1].isVisited=true;\r\n    grid[FINISH_NODE_ROW][FINISH_NODE_COL+1].isVisited=true;\r\n    walls.push([START_NODE_ROW-1,START_NODE_COL-2]);\r\n    walls.push([START_NODE_ROW-2,START_NODE_COL-1]);\r\n    walls.push([START_NODE_ROW+1,START_NODE_COL-2]);\r\n    walls.push([START_NODE_ROW+2,START_NODE_COL-1]);\r\n    grid[START_NODE_ROW-1][START_NODE_COL-1].isVisited=true;\r\n    grid[START_NODE_ROW+1][START_NODE_COL-1].isVisited=true;\r\n    grid[FINISH_NODE_ROW-1][FINISH_NODE_COL+1].isVisited=true;\r\n    grid[FINISH_NODE_ROW+1][FINISH_NODE_COL+1].isVisited=true;\r\n    walls.push([FINISH_NODE_ROW-1,FINISH_NODE_COL+2]);\r\n    walls.push([FINISH_NODE_ROW-2,FINISH_NODE_COL+1]);\r\n    walls.push([FINISH_NODE_ROW+1,FINISH_NODE_COL+2]);\r\n    walls.push([FINISH_NODE_ROW+2,FINISH_NODE_COL+1]);\r\n    len=11;\r\n    while (len>0){\r\n      let x=Math.floor(len*Math.random());\r\n      if(x===len){\r\n        x--;\r\n      }\r\n      let curRow=walls[x][0];\r\n      let curCol=walls[x][1];\r\n      let y=0;\r\n      let z=0;\r\n      if(curRow%2===1){\r\n        if (curCol!==0 && grid[curRow][curCol-1].isVisited===false){\r\n          y++;\r\n          z=0;\r\n        }\r\n        if (curCol<56 && curCol>=-1 && curRow>=0 && curRow<=22 && grid[curRow][curCol+1].isVisited===false){\r\n          y++;\r\n          z=1;\r\n        }\r\n      }\r\n      if(curRow%2===0){\r\n        if (curRow!==0 && grid[curRow-1][curCol].isVisited===false){\r\n          y++;\r\n          z=0;\r\n        }\r\n        if (curRow!==22 && grid[curRow+1][curCol].isVisited===false){\r\n          y++;\r\n          z=1;\r\n        }\r\n      }\r\n      if(y===1){\r\n        grid[curRow][curCol].isWall=false;\r\n        grid[curRow][curCol].isVisited=true;\r\n        if(curRow%2===1){\r\n          if(z===0){\r\n            grid[curRow][curCol-1].isVisited=true;\r\n            if(curCol-1===0){\r\n              if(curRow-1!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol-1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol-1].isWall===true ){\r\n                walls.push([curRow+1,curCol-1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curRow-1!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol-1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol-1].isWall===true){\r\n                walls.push([curRow+1,curCol-1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow][curCol-2].isWall===true){\r\n                walls.push([curRow,curCol-2]);\r\n                len++;\r\n              }\r\n            }\r\n          }\r\n          else{\r\n            grid[curRow][curCol+1].isVisited=true;\r\n            if(curCol+1===56){\r\n              if(curRow-1!==0 && grid[curRow-1][curCol+1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curRow-1!==0 && grid[curRow-1][curCol+1].isWall===true ){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow][curCol+2].isWall===true){\r\n                walls.push([curRow,curCol+2]);\r\n                len++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else{\r\n          if(z===0){\r\n            grid[curRow-1][curCol].isVisited=true;\r\n            if(curRow-1===1){\r\n              if(curCol!==56 && grid[curRow-1][curCol+1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curCol!==56 && grid[curRow-1][curCol+1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow-2][curCol].isWall===true){\r\n                walls.push([curRow-2,curCol]);\r\n                len++;\r\n              }\r\n            }\r\n            \r\n          }\r\n          else{\r\n            grid[curRow+1][curCol].isVisited=true;\r\n            if(curRow+1===21){\r\n              if(curCol!==56 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow+1][curCol-1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curCol!==56 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow+1][curCol-1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow+2][curCol].isWall===true){\r\n                walls.push([curRow+2,curCol]);\r\n                len++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      walls.splice(x,1);\r\n      len--;\r\n    }\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if(grid[row][col].isVisited===true){\r\n          grid[row][col].isVisited=false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //to redirect to the tutorial of pathfinding visualizer \r\n  changeLocation(){\r\n    window.location.href = \"https://shubhdoshi.github.io/pathfinder-tutorial/\";\r\n  }\r\n  \r\n  //main code\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <>\r\n        <html>\r\n  <head>\r\n    <title>Pathfinding Visualizer</title>\r\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.5/umd/popper.js\"/>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"/>\r\n    <link id=\"cssTheme\" rel=\"stylesheet\" href=\"CSS/styles.css\"/>\r\n    <script src=\"https://kit.fontawesome.com/9f428f52b3.js\" crossorigin=\"anonymous\"></script>\r\n  </head>\r\n  <body>\r\n      <div id='navigationBar'>\r\n     <nav className=\"navbar navbar-inverse\">\r\n       <div className=\"container-fluid\">\r\n         <div class=\"refresh\" className=\"navbar-header\">\r\n           <button onClick={() => window.location.reload(false)} id=\"refreshPage\" className=\"navigation navbar-brand\" href=\"#\">Pathfinding Visualizer</button>\r\n         </div>\r\n         <ul className=\"nav navbar-nav\">\r\n         <div className=\"col-lg-2.1 col-md-4 col-xs-12\">\r\n           <li id=\"mazePattern\" className=\"navigation dropdown\">\r\n           <Dropdown>\r\n           <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              Mazes and Patterns <span className=\"caret\"></span>\r\n           </Dropdown.Toggle>\r\n           <Dropdown.Menu>\r\n           <Dropdown.Item id=\"maze1\" onClick={() => this.mazeUsingKruskal(grid)} href=\"#/action-4\"><p>Maze using Kruskal's Algorithm</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze2\" onClick={() => this.mazeGeneration(grid)} href=\"#/action-1\"><p>Maze using Depth First Search</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze3\" onClick={() => this.mazeUsingPrim(grid)} href=\"#/action-5\"><p>Maze using Prim's Algorithm</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze4\" onClick={() => this.mazeWithVerticalWalls(grid)} href=\"#/action-2\"><p>Add Vertical Walls</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze5\" onClick={() => this.randomMazeGenerator(grid)} href=\"#/action-3\"><p>Random Maze Generator</p></Dropdown.Item>\r\n           </Dropdown.Menu>\r\n           </Dropdown>\r\n           </li>\r\n           </div>\r\n           <div className=\"col-lg-2 col-md-4 col-xs-12\">\r\n           <li className=\"dropdown\">\r\n           <Dropdown>\r\n           <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              Speed <span className=\"caret\"></span>\r\n           </Dropdown.Toggle>\r\n           <Dropdown.Menu>\r\n           <Dropdown.Item id=\"speed1\" onClick={() => this.visualizeDijkstraFast()} href=\"#/action-1\"><p>Fast</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"speed2\" onClick={() => this.visualizeDijkstraMedium()} href=\"#/action-2\"><p>Medium</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"speed3\" onClick={() => this.visualizeDijkstraSlow()} href=\"#/action-3\"><p>Slow</p></Dropdown.Item>\r\n           </Dropdown.Menu>\r\n           </Dropdown>\r\n           </li>\r\n           </div>\r\n           <div className=\"col-lg-2 col-md-4 col-xs-12\">\r\n           <li id='visualize'><button id='startButtonStart' onClick={() => this.visualizeDijkstraFast()}>\r\n          Visualize \r\n        </button></li>\r\n        </div>\r\n        <div className=\"col-lg-1 col-md-4 col-xs-12\">\r\n           <li className=\"navigation\"><button onClick={() => window.location.reload(false)} id='startButtonClearBoard' href=\"#\">Clear</button></li>\r\n           </div>\r\n           <div className=\"col-lg-3 col-md-4 col-xs-12\">\r\n           <li className=\"navigation\"><button id='help' onClick={() => this.changeLocation()}>How to use?</button></li>\r\n           </div>\r\n         </ul>\r\n       </div>\r\n     </nav>\r\n   </div>\r\n   <div>\r\n    <p className=\"a\"><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='startNode' />Start-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='targetNode' />Target-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='wallNode'/>Wall-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='visitedNode'/>Visited-Nodes </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='unvisitedNode'/>Unvisited-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='shortestPathNode'/>Shortest-path-Node </div></p>\r\n   </div>\r\n   <br/>\r\n   </body>\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\r\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\r\n</html>\r\n        \r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div id='row-0' key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (              \r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n//to create the initial grid\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 23; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 57; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\n//to create a node of the grid\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\n//to change the current state of wall of the node\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n//to change the current state of visit of the node\r\nconst getNewGridWithNodeVisited = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isVisited: !node.isVisited,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}