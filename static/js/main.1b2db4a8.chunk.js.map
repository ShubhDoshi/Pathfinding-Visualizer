{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/bfs.js","algorithms/dfs.js","algorithms/a-star.js","algorithms/greedy.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","type","id","className","types","onDrop","bind","data","alert","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNeighbors","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","mouseIsPressed","speed","algorithm","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstraFast","animateDijkstraMedium","animateDijkstraSlow","queue","ind","cur","bfs","getNodesInShortestPathOrderBFS","stack","pop","dfs","getNodesInShortestPathOrderDFS","open","x","close","h","f","row1","temp1","temp2","col1","Math","abs","val","q","splice","j","aStar","getNodesInShortestPathOrderAStar","max","greedy","getNodesInShortestPathOrderGreedy","DFS","getNewGridWithNodeVisited","stack1","stack2","curRow","curCol","temp","array","y","floor","random","ceil","verticalWalls","horizontalWalls","z","parent","ind1","a","b","ind2","walls","len","window","location","href","rel","src","crossorigin","class","onClick","reload","Dropdown","Toggle","variant","Menu","Item","mazeUsingKruskal","mazeGeneration","mazeUsingPrim","mazeWithVerticalWalls","randomMazeGenerator","setAlgoToDijkstra","setAlgoToBFS","setAlgoToAStar","setAlgoToGreedy","setAlgoToDFS","changeSpeedToFast","changeSpeedToMedium","changeSpeedToSlow","visualize","changeLocation","icon","faSquareFull","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1b2db4a8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Node.css';\r\nimport { Draggable, Droppable } from 'react-drag-and-drop'\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    let extraClassName = isFinish;\r\n    if (isFinish===true){\r\n      extraClassName='node-finish';\r\n      return (\r\n        <Draggable\r\n          type=\"nodeOfGrid\"\r\n          id={`node-${row}-${col}`}\r\n          className={`node ${extraClassName}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}></Draggable>\r\n      );\r\n    }\r\n    else if (isStart===true){\r\n      extraClassName='node-start';\r\n      return (\r\n        <Draggable\r\n          type={'nodeOfGrid'}\r\n          id={`node-${row}-${col}`}\r\n          className={`node ${extraClassName}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}></Draggable>\r\n      );\r\n    }\r\n    else if (isWall===true){\r\n      extraClassName='node-wall';\r\n    }\r\n\r\n    return (\r\n      <Droppable\r\n        types={['nodeOfGrid']}\r\n        onDrop={this.onDrop.bind(this)}\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></Droppable>\r\n    );\r\n  }\r\n  onDrop(data) {\r\n    alert(data);\r\n    // => banana \r\n}\r\n}","//dijkstra algorithm\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.isWall) continue;\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  //to sort the unvisited nodes by current distance\r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  //to update the distance of unvisited nodes\r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  //to get the unvisited neighbors\r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  //to get all nodes of the grid\r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  //to get the nodes in the shortest path\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [startNode];\r\n    const queue=[startNode];\r\n    startNode.distance=0;\r\n    startNode.isVisited=true;\r\n    let ind=0;\r\n    while(ind<queue.length){\r\n        let cur=queue[ind];\r\n        ind++;\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(cur, grid);\r\n        for(let i=0;i<unvisitedNeighbors.length;i++){\r\n            const {col, row} = unvisitedNeighbors[i];\r\n            grid[row][col].previousNode=cur;\r\n            if (grid[row][col] === finishNode) return visitedNodesInOrder;\r\n            unvisitedNeighbors[i].distance=cur.distance+1;\r\n            unvisitedNeighbors[i].isVisited=true;\r\n            visitedNodesInOrder.push(unvisitedNeighbors[i]);\r\n            queue.push(unvisitedNeighbors[i]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0 && grid[row - 1][col].isWall===false && grid[row - 1][col].isVisited===false) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1 && grid[row + 1][col].isWall===false && grid[row + 1][col].isVisited===false) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0 && grid[row][col-1].isWall===false && grid[row][col-1].isVisited===false) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1 && grid[row][col+1].isWall===false && grid[row][col+1].isVisited===false) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n  }\r\n\r\n  \r\n\r\n\r\n  export function getNodesInShortestPathOrderBFS(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n\r\n  ","export function dfs(grid, startNode,finishNode){\r\n    startNode.distance=0;\r\n    startNode.isVisited=true;\r\n    const visitedNodesInOrder=[startNode];\r\n    const stack=[startNode];\r\n    let ind=1;\r\n    while (ind!==0){\r\n        let cur=stack.pop();\r\n        ind--;\r\n        const neighbors=getNeighbors(cur,grid);\r\n        for(let i=0;i<neighbors.length;i++){\r\n            if(cur.distance+1<neighbors[i].distance && neighbors[i].isVisited===false){\r\n                neighbors[i].isVisited=true;\r\n                neighbors[i].distance=cur.distance+1;\r\n                neighbors[i].previousNode=cur;\r\n                stack.push(neighbors[i]);\r\n                ind++;\r\n                visitedNodesInOrder.push(neighbors[i]);\r\n                if(neighbors[i]===finishNode){\r\n                    return visitedNodesInOrder;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0 && grid[row - 1][col].isWall===false) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1 && grid[row + 1][col].isWall===false) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0 && grid[row][col-1].isWall===false) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1 && grid[row][col+1].isWall===false) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n  }\r\n\r\n  export function getNodesInShortestPathOrderDFS(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n","export function aStar(grid,startNode,finishNode){\r\n    const open=[startNode];\r\n    let x=1;\r\n    const close=[];\r\n    const h=[];\r\n    const f=[];\r\n    const visitedNodesInOrder=[startNode];\r\n    const {col, row} = finishNode;\r\n    for (let row1=0;row1<23;row1++){\r\n        let temp1=[];\r\n        let temp2=[];\r\n        for(let col1=0;col1<57;col1++){\r\n            temp1.push(Math.abs(row-row1)+Math.abs(col-col1));\r\n            temp2.push(grid[row1][col1].distance+Math.abs(row-row1)+Math.abs(col-col1));\r\n        }\r\n        h.push(temp1);\r\n        f.push(temp2);\r\n    }\r\n    f[startNode.row][startNode.col]=0;\r\n    startNode.distance=0;\r\n    startNode.isVisited=true;\r\n    while(x>0){\r\n        let ind=0;\r\n        const {col, row} = open[ind];\r\n        let val=f[row][col];\r\n        for(let i=0;i<open.length;i++){\r\n            const {col, row} = open[i];\r\n            if (val>f[row][col]){\r\n                val=f[row][col];\r\n                ind=i;\r\n            }\r\n        }\r\n        let q=open[ind];\r\n        open.splice(ind,1);\r\n        x--;\r\n        const neighbors=getUnvisitedNeighbors(q,grid);\r\n        for (let i=0;i<neighbors.length;i++){\r\n            if(neighbors[i]===finishNode){\r\n                neighbors[i].previousNode=q;\r\n                visitedNodesInOrder.push(neighbors[i]);\r\n                neighbors.isVisited=true;\r\n                const {col, row} =neighbors[i];\r\n                neighbors[i].distance=q.distance+1;\r\n                f[row][col]=neighbors[i].distance+h[row][col];\r\n                return visitedNodesInOrder;\r\n            }\r\n            let temp1=false;\r\n            let temp2=false;\r\n            for (let j=0;j<close.length;j++){\r\n                if(close[j]===neighbors[i]){\r\n                    temp2=true;\r\n                }\r\n            }\r\n            for (let j=0;j<open.length;j++){\r\n                if(open[j]===neighbors[i]){\r\n                    temp1=true;\r\n                }\r\n            }\r\n            if(temp2===true){\r\n                continue;\r\n            }\r\n            else if(temp1===true && neighbors[i].distance>q.distance+1){\r\n                neighbors[i].distance=q.distance+1;\r\n                neighbors[i].previousNode=q;\r\n                const {col, row} =neighbors[i];\r\n                f[row][col]=neighbors[i].distance+h[row][col];\r\n            }\r\n            else if(temp1===false && temp2===false){\r\n                neighbors[i].previousNode=q;\r\n                visitedNodesInOrder.push(neighbors[i]);\r\n                neighbors.isVisited=true;\r\n                const {col, row} =neighbors[i];\r\n                neighbors[i].distance=q.distance+1;\r\n                f[row][col]=neighbors[i].distance+h[row][col];\r\n                open.push(neighbors[i]);\r\n                x++;\r\n            }\r\n        }\r\n        close.push(q);\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0 && grid[row - 1][col].isWall===false) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1 && grid[row + 1][col].isWall===false) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0 && grid[row][col-1].isWall===false) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1 && grid[row][col+1].isWall===false) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n  }\r\n\r\n\r\n//to get the nodes in the shortest path\r\nexport function getNodesInShortestPathOrderAStar(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","export function greedy(grid,startNode,finishNode){\r\n    const stack=[startNode];\r\n    let x=1;\r\n    const h=[];\r\n    const visitedNodesInOrder=[];\r\n    const {col, row} = finishNode;\r\n    for (let row1=0;row1<23;row1++){\r\n        let temp1=[];\r\n        for(let col1=0;col1<57;col1++){\r\n            temp1.push(Math.abs(row-row1)+Math.abs(col-col1));\r\n        }\r\n        h.push(temp1);\r\n    }\r\n    startNode.isVisited=true;\r\n    while(x>0){\r\n        let cur=stack.pop();\r\n        visitedNodesInOrder.push(cur);\r\n        if(cur===finishNode){\r\n            return visitedNodesInOrder;\r\n        }\r\n        x--;\r\n        let neighbors=getUnvisitedNeighbors(cur,grid);\r\n        while(neighbors.length>0){\r\n            let ind=0;\r\n            let max=neighbors[ind];\r\n            for(let i=0;i<neighbors.length;i++){\r\n                if(max<h[neighbors[i].row][neighbors[i].col]){\r\n                    max=h[neighbors[i].row][neighbors[i].col];\r\n                    ind=i;\r\n                }\r\n            }\r\n            neighbors[ind].previousNode=cur;\r\n            neighbors[ind].isVisited=true;\r\n            stack.push(neighbors[ind]);\r\n            x++;\r\n            neighbors.splice(ind,1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0 && grid[row - 1][col].isWall===false && grid[row - 1][col].isVisited===false) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1 && grid[row + 1][col].isWall===false && grid[row + 1][col].isVisited===false) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0 && grid[row][col-1].isWall===false && grid[row][col-1].isVisited===false) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1 && grid[row][col+1].isWall===false && grid[row][col+1].isVisited===false) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n  }\r\n\r\n\r\n//to get the nodes in the shortest path\r\nexport function getNodesInShortestPathOrderGreedy(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {bfs, getNodesInShortestPathOrderBFS} from '../algorithms/bfs';\r\nimport {dfs, getNodesInShortestPathOrderDFS} from '../algorithms/dfs';\r\nimport {aStar,getNodesInShortestPathOrderAStar} from '../algorithms/a-star';\r\nimport {greedy,getNodesInShortestPathOrderGreedy} from '../algorithms/greedy';\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport { faSquareFull } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport './PathfindingVisualizer.css';\r\n\r\nlet START_NODE_ROW = 12;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 12;\r\nlet FINISH_NODE_COL = 43;\r\n\r\n\r\n/*\r\nconst START_NODE_ROW = prompt(\"Please enter start-node row\", 12);\r\nconst START_NODE_COL = prompt(\"Please enter start-node column\", 14);\r\nconst FINISH_NODE_ROW = prompt(\"Please enter target-node row\", 12);\r\nconst FINISH_NODE_COL = prompt(\"Please enter target-node column\", 42);\r\n*/\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      speed: 'fast',\r\n      algorithm: 'none',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n  \r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n  \r\n  \r\n  //function to give animation while implementing dijkstra with slow speed\r\n  animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length-1; i++) {\r\n      if (i === visitedNodesInOrder.length-1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 500 * i);\r\n        return;\r\n      }\r\n      else{\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 500* i);\r\n    }\r\n    }\r\n  }\r\n\r\n  //function to give animation while implementing dijkstra with medium speed\r\n  animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length-1; i++) {\r\n      if (i === visitedNodesInOrder.length-1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 75 * i);\r\n        return;\r\n      }\r\n      else{\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 75* i);\r\n    }\r\n    }\r\n  }\r\n\r\n  //function to give animation while implementing dijkstra with fast speed\r\n  animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length-1; i++) {\r\n      if (i === visitedNodesInOrder.length-1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      else{\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10* i);\r\n    }\r\n    }\r\n  }\r\n\r\n  //function to give animation to shortest path after implementing dijkstra  \r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 1; i < nodesInShortestPathOrder.length-1; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    if(nodesInShortestPathOrder.length<=1){\r\n      setTimeout(() => {\r\n      alert(\"Shortest Path Not Found!!\");\r\n      },1000);\r\n    }\r\n  }\r\n\r\n  //implement dijkstra's algorithm for finding shortest path\r\n  visualize() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    startNode.isWall=false;\r\n    finishNode.isWall=false;\r\n    if (this.state.algorithm==='dijkstra'){\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      if (this.state.speed==='fast'){\r\n        this.animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else if(this.state.speed==='medium'){\r\n        this.animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else{\r\n        this.animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n    }\r\n    else if (this.state.algorithm==='BFS'){\r\n      const visitedNodesInOrder= bfs(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(finishNode);\r\n      if (this.state.speed==='fast'){\r\n        this.animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else if(this.state.speed==='medium'){\r\n        this.animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else{\r\n        this.animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n    }\r\n    else if(this.state.algorithm==='DFS'){\r\n      const visitedNodesInOrder= dfs(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(finishNode);\r\n      if (this.state.speed==='fast'){\r\n        this.animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else if(this.state.speed==='medium'){\r\n        this.animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else{\r\n        this.animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n    }\r\n    else if(this.state.algorithm==='a-star'){\r\n      const visitedNodesInOrder= aStar(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderAStar(finishNode);\r\n      if (this.state.speed==='fast'){\r\n        this.animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else if(this.state.speed==='medium'){\r\n        this.animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else{\r\n        this.animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n    }\r\n    else if(this.state.algorithm==='greedy'){\r\n      const visitedNodesInOrder= greedy(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderGreedy(finishNode);\r\n      if (this.state.speed==='fast'){\r\n        this.animateDijkstraFast(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else if(this.state.speed==='medium'){\r\n        this.animateDijkstraMedium(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n      else{\r\n        this.animateDijkstraSlow(visitedNodesInOrder, nodesInShortestPathOrder);\r\n      }\r\n    }\r\n    else{\r\n      alert(\"Please select an algorithm\");\r\n    }\r\n  }\r\n\r\n  //Set Algorithm to Dijkstra\r\n  setAlgoToDijkstra(){\r\n    this.setState({algorithm: 'dijkstra'});\r\n  }\r\n\r\n  //Set Algorithm to BFS\r\n  setAlgoToBFS(){\r\n    this.setState({algorithm: 'BFS'});\r\n  }\r\n\r\n  //Set Algorithm to DFS\r\n  setAlgoToDFS(){\r\n    this.setState({algorithm: 'DFS'});\r\n  }\r\n\r\n  //Set Algorithm to A*\r\n  setAlgoToAStar(){\r\n    this.setState({algorithm: 'a-star'});\r\n  }\r\n\r\n  //Set Algorithm to Greedy\r\n  setAlgoToGreedy(){\r\n    this.setState({algorithm: 'greedy'});\r\n  }\r\n\r\n  //Change speed of visualization to fast\r\n  changeSpeedToFast(){\r\n    this.setState({speed: 'fast'});\r\n  } \r\n\r\n  //Change speed of visualization to medium\r\n  changeSpeedToMedium(){\r\n    this.setState({speed: 'medium'});\r\n  } \r\n\r\n  //Change speed of visualization to slow\r\n  changeSpeedToSlow(){\r\n    this.setState({speed: 'slow'});\r\n  } \r\n\r\n  //generates a maze using DFS\r\n  mazeGeneration(grid){\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    this.DFS(grid,START_NODE_ROW,START_NODE_COL);\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===1){\r\n          grid[row][col].isVisited=false;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //DFS algorithm to create a random maze\r\n  DFS(grid,row,col){\r\n    let newGrid = getNewGridWithNodeVisited(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: false});\r\n    let x=1;\r\n    let stack1=[row];\r\n    let stack2=[col];\r\n    while (x>0){\r\n      let curRow=stack1.pop();\r\n      let curCol=stack2.pop();\r\n      x--;\r\n      newGrid = getNewGridWithNodeVisited(this.state.grid, row, col);\r\n      this.setState({grid: newGrid, mouseIsPressed: false});\r\n      let temp=0;\r\n    let array=[]\r\n    if (curRow>1){\r\n      if (grid[curRow-2][curCol].isVisited===false){\r\n        temp+=1;\r\n        array.push(1);\r\n      }\r\n    }\r\n    if (curCol>2){\r\n      if (grid[curRow][curCol-2].isVisited===false){\r\n        temp+=1;\r\n        array.push(2);\r\n      }\r\n    }\r\n    if (curRow<21){\r\n      if (grid[curRow+2][curCol].isVisited===false){\r\n        temp+=1;\r\n        array.push(3);\r\n      }\r\n    }\r\n    if(curCol<55){\r\n      if (grid[curRow][curCol+2].isVisited===false){\r\n        temp+=1;\r\n        array.push(4);\r\n      }\r\n    }\r\n    while (temp>0){\r\n      \r\n      let y=Math.floor(Math.random()*temp);\r\n      if (array[y]===1){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow-1, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow-2);\r\n        stack2.push(curCol);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow-2, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      else if(array[y]===2){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow, curCol-1);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow);\r\n        stack2.push(curCol-2);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow, curCol-2);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      else if(array[y]===3){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow+1, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow+2);\r\n        stack2.push(curCol);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow+2, curCol);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      else if(array[y]===4){\r\n        array.splice(y,1);\r\n        newGrid = getNewGridWithWallToggled(this.state.grid, curRow, curCol+1);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n        stack1.push(curRow);\r\n        stack2.push(curCol+2);\r\n        x++;\r\n        newGrid = getNewGridWithNodeVisited(this.state.grid, curRow, curCol+2);\r\n        this.setState({grid: newGrid, mouseIsPressed: false});\r\n      }\r\n      temp--;\r\n    }\r\n    }\r\n  }\r\n\r\n  //add random vertical walls in the grid\r\n  mazeWithVerticalWalls(grid){\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if(((row===0 || col===0)||(row===22 || col===56))&&(grid[row][col].isWall===false)){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    for (let col = 2; col < 55; col+=2){\r\n      let row=1\r\n      while(row<22) {\r\n        let x=Math.ceil((22-row)*Math.random());\r\n        if (x===21){\r\n          x--;\r\n        }\r\n        while(x>0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n          row++;\r\n          x--;\r\n        }\r\n        row++;\r\n      }\r\n    }\r\n  }\r\n  \r\n  //generates a random maze using DFS algorithm and algorithm to add vertical walls\r\n  randomMazeGenerator(grid){\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    this.DFS(grid,START_NODE_ROW,START_NODE_COL);\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((row+col)%2===1){\r\n          grid[row][col].isVisited=false;\r\n        }\r\n      }\r\n    }\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if(((row===0 || col===0)||(row===22 || col===56))&&(grid[row][col].isWall===false)){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    for (let col = 2; col < 55; col+=2){\r\n      let row=1\r\n      while(row<22) {\r\n        let x=Math.ceil((22-row)*Math.random());\r\n        if (x===21){\r\n          x--;\r\n        }\r\n        while(x>0){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n          row++;\r\n          x--;\r\n        }\r\n        row++;\r\n      }\r\n    }\r\n  }\r\n\r\n  //Kruksal's algorithm to create a random maze\r\n  mazeUsingKruskal(grid){\r\n    let verticalWalls=[];\r\n    let horizontalWalls=[];\r\n    let z=0;\r\n    let y=0;\r\n    let parent=[];\r\n    for (let row = 0; row < 23; row++) {\r\n      let temp=[];\r\n      for (let col = 0; col < 57; col++) {\r\n        if((((row+col)%2===0)||(row%2===0))&&((row!==START_NODE_ROW || col!==START_NODE_COL)&&(row!==FINISH_NODE_ROW || col!==FINISH_NODE_COL))){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n        if((((row+col)%2===0)&&(row%2===0))&&(row!==0 && row!==22)){\r\n          verticalWalls.push([row,col]);\r\n          z++;\r\n        }\r\n        if(((row+col)%2===0)&&(row%2===1)){\r\n          horizontalWalls.push([row,col]);\r\n          y++;\r\n        }\r\n        temp.push([row,col]);\r\n      }\r\n      parent.push(temp);\r\n    }\r\n    let temp1=Math.floor(4*Math.random());\r\n    if(temp1===0){\r\n      parent[START_NODE_ROW-1][START_NODE_COL][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW-1][START_NODE_COL][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      grid[START_NODE_ROW-1][START_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else if(temp1===1){\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW-1][START_NODE_COL+1][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      parent[START_NODE_ROW][START_NODE_COL+1][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW][START_NODE_COL+1][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      grid[START_NODE_ROW][START_NODE_COL+1].isWall=false;\r\n      z--;\r\n    }\r\n    else if(temp1===2){\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      parent[START_NODE_ROW+1][START_NODE_COL][0]=parent[START_NODE_ROW+1][START_NODE_COL+1][0];\r\n      parent[START_NODE_ROW+1][START_NODE_COL][1]=parent[START_NODE_ROW+1][START_NODE_COL+1][1];\r\n      grid[START_NODE_ROW+1][START_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else{\r\n      parent[START_NODE_ROW][START_NODE_COL-1][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW][START_NODE_COL-1][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][0]=parent[START_NODE_ROW-1][START_NODE_COL-1][0];\r\n      parent[START_NODE_ROW+1][START_NODE_COL-1][1]=parent[START_NODE_ROW-1][START_NODE_COL-1][1];\r\n      grid[START_NODE_ROW][START_NODE_COL-1].isWall=false;\r\n      z--;\r\n    }\r\n    let temp2=Math.floor(4*Math.random());\r\n    if(temp2===0){\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      grid[FINISH_NODE_ROW-1][FINISH_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else if(temp2===1){\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW-1][FINISH_NODE_COL+1][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL+1][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL+1][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      grid[FINISH_NODE_ROW][FINISH_NODE_COL+1].isWall=false;\r\n      z--;\r\n    }\r\n    else if(temp2===2){\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL][0]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][0];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL][1]=parent[FINISH_NODE_ROW+1][FINISH_NODE_COL+1][1];\r\n      grid[FINISH_NODE_ROW+1][FINISH_NODE_COL].isWall=false;\r\n      y--;\r\n    }\r\n    else{\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL-1][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW][FINISH_NODE_COL-1][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][0]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][0];\r\n      parent[FINISH_NODE_ROW+1][FINISH_NODE_COL-1][1]=parent[FINISH_NODE_ROW-1][FINISH_NODE_COL-1][1];\r\n      grid[FINISH_NODE_ROW][FINISH_NODE_COL-1].isWall=false;\r\n      z--;\r\n    }\r\n    while(y>0 && z>0){\r\n      let x=Math.floor(2*Math.random());\r\n      if(x===0){\r\n        let ind1=Math.floor(y*Math.random());\r\n        if(ind1===y){\r\n          ind1--;\r\n        }\r\n        let curRow=horizontalWalls[ind1][0];\r\n        let curCol=horizontalWalls[ind1][1];\r\n        let a=parent[curRow][curCol-1][0];\r\n        let b=parent[curRow][curCol-1][1];\r\n        if ((parent[curRow][curCol+1][0]!==a)||(parent[curRow][curCol+1][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow || col!==curCol+1)&&(parent[row][col][0]===parent[curRow][curCol+1][0] && parent[row][col][1]===parent[curRow][curCol+1][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow][curCol+1][0]=a;\r\n          parent[curRow][curCol+1][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        horizontalWalls.splice(ind1,1);\r\n        y--;\r\n      }\r\n      else{\r\n        let ind2=Math.floor(z*Math.random());\r\n        if(ind2===z){\r\n          ind2--;\r\n        }\r\n        let curRow=verticalWalls[ind2][0];\r\n        let curCol=verticalWalls[ind2][1];\r\n        let a=parent[curRow-1][curCol][0];\r\n        let b=parent[curRow-1][curCol][1];\r\n        if ((parent[curRow+1][curCol][0]!==a)||(parent[curRow+1][curCol][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow+1 || col!==curCol)&&(parent[row][col][0]===parent[curRow+1][curCol][0] && parent[row][col][1]===parent[curRow+1][curCol][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow+1][curCol][0]=a;\r\n          parent[curRow+1][curCol][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        verticalWalls.splice(ind2,1);\r\n        z--;\r\n      }\r\n    }\r\n    \r\n    while(y>0){\r\n      let ind1=Math.floor(y*Math.random());\r\n        let curRow=horizontalWalls[ind1][0];\r\n        let curCol=horizontalWalls[ind1][1];\r\n        let a=parent[curRow][curCol-1][0];\r\n        let b=parent[curRow][curCol-1][1];\r\n        if ((parent[curRow][curCol+1][0]!==a)||(parent[curRow][curCol+1][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow || col!==curCol+1)&&(parent[row][col][0]===parent[curRow][curCol+1][0] && parent[row][col][1]===parent[curRow][curCol+1][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow][curCol+1][0]=a;\r\n          parent[curRow][curCol+1][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        horizontalWalls.splice(ind1,1);\r\n        y--;\r\n    }\r\n    while(z>0){\r\n      let ind2=Math.floor(z*Math.random());\r\n        let curRow=verticalWalls[ind2][0];\r\n        let curCol=verticalWalls[ind2][1];\r\n        let a=parent[curRow-1][curCol][0];\r\n        let b=parent[curRow-1][curCol][1];\r\n        if ((parent[curRow+1][curCol][0]!==a)||(parent[curRow+1][curCol][1]!==b)){\r\n          for (let row = 0; row < 23; row++) {\r\n            for (let col = 0; col < 57; col++) {\r\n              if((row!==curRow+1 || col!==curCol)&&(parent[row][col][0]===parent[curRow+1][curCol][0] && parent[row][col][1]===parent[curRow+1][curCol][1])){\r\n                parent[row][col][0]=a;\r\n                parent[row][col][1]=b;\r\n              }\r\n            }\r\n          }\r\n          parent[curRow+1][curCol][0]=a;\r\n          parent[curRow+1][curCol][1]=b;\r\n          parent[curRow][curCol][0]=a;\r\n          parent[curRow][curCol][1]=b;\r\n          grid[curRow][curCol].isWall=false;\r\n        }\r\n        verticalWalls.splice(ind2,1);\r\n        z--;\r\n    }\r\n  }\r\n    \r\n  //Prim's algorithm to create a random maze\r\n  mazeUsingPrim(grid){\r\n    let walls=[];\r\n    let len=0;\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if((((row+col)%2===0)||(row%2===0))&&(row!==FINISH_NODE_ROW-1 || col!==FINISH_NODE_COL)&&(row!==START_NODE_ROW || col!==START_NODE_COL-1)&&(row!==FINISH_NODE_ROW || col!==FINISH_NODE_COL+1)&&((row!==START_NODE_ROW || col!==START_NODE_COL)&&(row!==FINISH_NODE_ROW || col!==FINISH_NODE_COL))){\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid, mouseIsPressed: false});\r\n        }\r\n      }\r\n    }\r\n    walls.push([START_NODE_ROW-1,START_NODE_COL]);\r\n    walls.push([START_NODE_ROW+1,START_NODE_COL]);\r\n    walls.push([START_NODE_ROW,START_NODE_COL+1]);\r\n    grid[START_NODE_ROW][START_NODE_COL].isVisited=true;\r\n    grid[START_NODE_ROW][START_NODE_COL-1].isVisited=true;\r\n    grid[FINISH_NODE_ROW][FINISH_NODE_COL+1].isVisited=true;\r\n    walls.push([START_NODE_ROW-1,START_NODE_COL-2]);\r\n    walls.push([START_NODE_ROW-2,START_NODE_COL-1]);\r\n    walls.push([START_NODE_ROW+1,START_NODE_COL-2]);\r\n    walls.push([START_NODE_ROW+2,START_NODE_COL-1]);\r\n    grid[START_NODE_ROW-1][START_NODE_COL-1].isVisited=true;\r\n    grid[START_NODE_ROW+1][START_NODE_COL-1].isVisited=true;\r\n    grid[FINISH_NODE_ROW-1][FINISH_NODE_COL+1].isVisited=true;\r\n    grid[FINISH_NODE_ROW+1][FINISH_NODE_COL+1].isVisited=true;\r\n    walls.push([FINISH_NODE_ROW-1,FINISH_NODE_COL+2]);\r\n    walls.push([FINISH_NODE_ROW-2,FINISH_NODE_COL+1]);\r\n    walls.push([FINISH_NODE_ROW+1,FINISH_NODE_COL+2]);\r\n    walls.push([FINISH_NODE_ROW+2,FINISH_NODE_COL+1]);\r\n    len=11;\r\n    while (len>0){\r\n      let x=Math.floor(len*Math.random());\r\n      if(x===len){\r\n        x--;\r\n      }\r\n      let curRow=walls[x][0];\r\n      let curCol=walls[x][1];\r\n      let y=0;\r\n      let z=0;\r\n      if(curRow%2===1){\r\n        if (curCol!==0 && grid[curRow][curCol-1].isVisited===false){\r\n          y++;\r\n          z=0;\r\n        }\r\n        if (curCol<56 && curCol>=-1 && curRow>=0 && curRow<=22 && grid[curRow][curCol+1].isVisited===false){\r\n          y++;\r\n          z=1;\r\n        }\r\n      }\r\n      if(curRow%2===0){\r\n        if (curRow!==0 && grid[curRow-1][curCol].isVisited===false){\r\n          y++;\r\n          z=0;\r\n        }\r\n        if (curRow!==22 && grid[curRow+1][curCol].isVisited===false){\r\n          y++;\r\n          z=1;\r\n        }\r\n      }\r\n      if(y===1){\r\n        grid[curRow][curCol].isWall=false;\r\n        grid[curRow][curCol].isVisited=true;\r\n        if(curRow%2===1){\r\n          if(z===0){\r\n            grid[curRow][curCol-1].isVisited=true;\r\n            if(curCol-1===0){\r\n              if(curRow-1!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol-1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol-1].isWall===true ){\r\n                walls.push([curRow+1,curCol-1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curRow-1!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol-1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol-1].isWall===true){\r\n                walls.push([curRow+1,curCol-1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow][curCol-2].isWall===true){\r\n                walls.push([curRow,curCol-2]);\r\n                len++;\r\n              }\r\n            }\r\n          }\r\n          else{\r\n            grid[curRow][curCol+1].isVisited=true;\r\n            if(curCol+1===56){\r\n              if(curRow-1!==0 && grid[curRow-1][curCol+1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curRow-1!==0 && grid[curRow-1][curCol+1].isWall===true ){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curRow+1!==22 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow][curCol+2].isWall===true){\r\n                walls.push([curRow,curCol+2]);\r\n                len++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else{\r\n          if(z===0){\r\n            grid[curRow-1][curCol].isVisited=true;\r\n            if(curRow-1===1){\r\n              if(curCol!==56 && grid[curRow-1][curCol+1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curCol!==56 && grid[curRow-1][curCol+1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow-1][curCol-1].isWall===true){\r\n                walls.push([curRow-1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow-2][curCol].isWall===true){\r\n                walls.push([curRow-2,curCol]);\r\n                len++;\r\n              }\r\n            }\r\n            \r\n          }\r\n          else{\r\n            grid[curRow+1][curCol].isVisited=true;\r\n            if(curRow+1===21){\r\n              if(curCol!==56 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow+1][curCol-1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n            }\r\n            else{\r\n              if(curCol!==56 && grid[curRow+1][curCol+1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(curCol!==0 && grid[curRow+1][curCol-1].isWall===true){\r\n                walls.push([curRow+1,curCol+1]);\r\n                len++;\r\n              }\r\n              if(grid[curRow+2][curCol].isWall===true){\r\n                walls.push([curRow+2,curCol]);\r\n                len++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      walls.splice(x,1);\r\n      len--;\r\n    }\r\n    for (let row = 0; row < 23; row++) {\r\n      for (let col = 0; col < 57; col++) {\r\n        if(grid[row][col].isVisited===true){\r\n          grid[row][col].isVisited=false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //to redirect to the tutorial of pathfinding visualizer \r\n  changeLocation(){\r\n    window.location.href = \"https://shubhdoshi.github.io/pathfinder-tutorial/\";\r\n  }\r\n  \r\n  //main code\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <>\r\n        <html>\r\n  <head>\r\n    <title>Pathfinding Visualizer</title>\r\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.5/umd/popper.js\"/>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"/>\r\n    <link id=\"cssTheme\" rel=\"stylesheet\" href=\"CSS/styles.css\"/>\r\n    <script src=\"https://kit.fontawesome.com/9f428f52b3.js\" crossorigin=\"anonymous\"></script>\r\n  </head>\r\n  <body>\r\n      <div id='navigationBar'>\r\n     <nav className=\"navbar navbar-inverse\">\r\n       <div className=\"container-fluid\">\r\n         <div class=\"refresh\" className=\"navbar-header\">\r\n           <button onClick={() => window.location.reload(false)} id=\"refreshPage\" className=\"navigation navbar-brand\" href=\"#\">Pathfinding Visualizer</button>\r\n         </div>\r\n         <ul className=\"nav navbar-nav\">\r\n         <div className=\"col-md-4 col-xs-12\">\r\n           <li id=\"mazePattern\" className=\"navigation dropdown\">\r\n           <Dropdown>\r\n           <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              Mazes and Patterns <span className=\"caret\"></span>\r\n           </Dropdown.Toggle>\r\n           <Dropdown.Menu>\r\n           <Dropdown.Item id=\"maze1\" onClick={() => this.mazeUsingKruskal(grid)} href=\"#/action-4\"><p>Maze using Kruskal's Algorithm</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze2\" onClick={() => this.mazeGeneration(grid)} href=\"#/action-1\"><p>Maze using Depth First Search</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze3\" onClick={() => this.mazeUsingPrim(grid)} href=\"#/action-5\"><p>Maze using Prim's Algorithm</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze4\" onClick={() => this.mazeWithVerticalWalls(grid)} href=\"#/action-2\"><p>Add Vertical Walls</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"maze5\" onClick={() => this.randomMazeGenerator(grid)} href=\"#/action-3\"><p>Random Maze Generator</p></Dropdown.Item>\r\n           </Dropdown.Menu>\r\n           </Dropdown>\r\n           </li>\r\n           </div>\r\n         <div className=\"col-md-4 col-xs-12\">\r\n         <li className=\"navigation dropdown\">\r\n           <Dropdown>\r\n           <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              Algorithms <span className=\"caret\"></span>\r\n           </Dropdown.Toggle>\r\n           <Dropdown.Menu>\r\n           <Dropdown.Item onClick={() => this.setAlgoToDijkstra()} href=\"#/action-1\"><p>Dijkstra Algorithm</p></Dropdown.Item>\r\n           <Dropdown.Item onClick={() => this.setAlgoToBFS()} href=\"#/action-3\"><p>Breadth First Search</p></Dropdown.Item>\r\n           <Dropdown.Item onClick={() => this.setAlgoToAStar()} href=\"#/action-2\"><p>A* Search Algorithm</p></Dropdown.Item>\r\n           <Dropdown.Item onClick={() => this.setAlgoToGreedy()} href=\"#/action-2\"><p>Greedy Search Algorithm</p></Dropdown.Item>\r\n           <Dropdown.Item onClick={() => this.setAlgoToDFS()} href=\"#/action-2\"><p>Depth First Search</p></Dropdown.Item>\r\n           </Dropdown.Menu>\r\n           </Dropdown>\r\n           </li>\r\n          </div>\r\n           <div className=\"col-md-4 col-xs-12\">\r\n           <li className=\"dropdown\">\r\n           <Dropdown>\r\n           <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n              Speed <span className=\"caret\"></span>\r\n           </Dropdown.Toggle>\r\n           <Dropdown.Menu>\r\n           <Dropdown.Item id=\"speed1\" onClick={() => this.changeSpeedToFast()} href=\"#/action-1\"><p>Fast</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"speed2\" onClick={() => this.changeSpeedToMedium()} href=\"#/action-2\"><p>Medium</p></Dropdown.Item>\r\n           <Dropdown.Item id=\"speed3\" onClick={() => this.changeSpeedToSlow()} href=\"#/action-3\"><p>Slow</p></Dropdown.Item>\r\n           </Dropdown.Menu>\r\n           </Dropdown>\r\n           </li>\r\n           </div>\r\n        <div className=\"col-md-4 col-xs-12\">\r\n           <li id='clearBoard' className=\"navigation\"><button onClick={() => window.location.reload(false)} id='startButtonClearBoard' href=\"#\">Clear Board</button></li>\r\n           </div>\r\n           <div className=\"col-md-4 col-xs-12\">\r\n           <li id='visualize'><button id='startButtonStart' onClick={() => this.visualize()}>\r\n          Visualize \r\n        </button></li>\r\n        </div>\r\n           <div className=\"col-md-4 col-xs-12\">\r\n           <li className=\"navigation\"><button id='help' onClick={() => this.changeLocation()}>How to use?</button></li>\r\n           </div>\r\n         </ul>\r\n       </div>\r\n     </nav>\r\n   </div>\r\n   <div>\r\n    <p className=\"a\"><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='startNode' />Start-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='targetNode' />Target-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='wallNode'/>Wall-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='visitedNode'/>Visited-Nodes </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='unvisitedNode'/>Unvisited-Node </div><div className=\"col-lg-2 col-md-4 col-xs-12\"><FontAwesomeIcon icon={faSquareFull} id='shortestPathNode'/>Shortest-path-Node </div></p>\r\n   </div>\r\n   <br/>\r\n   </body>\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\"></script>\r\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\r\n</html>\r\n        \r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div id='row-0' key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (              \r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n//to create the initial grid\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 23; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 57; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\n//to create a node of the grid\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\n//to change the current state of wall of the node\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n//to change the current state of visit of the node\r\nconst getNewGridWithNodeVisited = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isVisited: !node.isVisited,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}